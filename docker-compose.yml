version: "3.9"
services:
  opensearch-node1:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-data-node
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data
    ports:
      - 9200:9200
      - 9600:9600
    networks:
      - opensearch-net

  opensearch-node2:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-ml-node
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - node.roles=ml
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    networks:
      - opensearch-net
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    ports:
      - 5601:5601
    expose:
      - "5601"
    environment:
      - 'OPENSEARCH_HOSTS=["http://opensearch-node1:9200","http://opensearch-node2:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    networks:
      - opensearch-net

  # Database
  database:
    image: "postgres:latest"
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - docbox

  # UI for working with local postgres instance
  pgadmin:
    image: dpage/pgadmin4:8.14
    ports:
      - 5433:80
    env_file:
      - .env
    depends_on:
      - database
    volumes:
      - pgadmin-data:/var/lib/pgadmin/
    networks:
      - docbox

  # S3 compatible server
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9090:9000" # S3 API
      - "9091:9001" # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_NOTIFY_WEBHOOK_ENABLE_primary: "on"
      MINIO_NOTIFY_WEBHOOK_ENDPOINT_primary: "http://docbox:8080/s3-events"
      MINIO_NOTIFY_WEBHOOK_QUEUE_DIR: "/data/events"
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - docbox

  squid:
    image: sameersbn/squid:3.5.27-2
    ports:
      - "3128:3128"
    volumes:
      - ./dev.squid.conf:/etc/squid/squid.conf

  # Docbox server
  docbox:
    build:
      context: .
      dockerfile: ./containers/Docbox.Dockerfile
    ports:
      - 8080:8080
    env_file:
      - docker.env
    networks:
      - docbox
    depends_on:
      - database
      - s3mock
      - opensearch-node1
      - opensearch-node2
      - opensearch-dashboards
      - squid
    profiles: ["api"]

  # Office file converter server
  office-convert-server:
    build:
      context: .
      dockerfile: ./containers/OfficeConvertServer.Dockerfile
    ports:
      - 3000:3000
    networks:
      - docbox
    restart: always

volumes:
  opensearch-data1:
  opensearch-data2:
  postgres_data:
  pgadmin-data:
  locals3:
  minio-data:

networks:
  opensearch-net:
  docbox:
    driver: bridge
